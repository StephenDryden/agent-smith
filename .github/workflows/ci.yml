name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build_and_test:
    name: Build and Test (.NET + Docker) on PR
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore agent-smith.sln

      - name: Build
        run: dotnet build agent-smith.sln -c Release --no-restore

      - name: Test
        run: dotnet test agent-smith.sln -c Release --no-build --verbosity normal

      - name: Build Docker image (slite)
        run: |
          docker build -f docker/Dockerfile \
            --build-arg CONFIG_FILE=configs/slite.agent.json \
            -t agent-smith:slite .

      - name: Build Docker image (newrelic)
        run: |
          docker build -f docker/Dockerfile \
            --build-arg CONFIG_FILE=configs/newrelic.agent.json \
            -t agent-smith:newrelic .

  build_images_on_main:
    name: Build images on merge to main (ECR push commented)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      # ECR_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} # set when wiring ECR
      ECR_REPOSITORY: agent-smith
      SHORT_SHA: ${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute tags
        id: vars
        run: |
          SHORT_SHA=${SHORT_SHA:0:7}
          echo "short=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Build image (slite)
        run: |
          docker build -f docker/Dockerfile \
            --build-arg CONFIG_FILE=configs/slite.agent.json \
            -t agent-smith:slite-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.short }} .

      - name: Build image (newrelic)
        run: |
          docker build -f docker/Dockerfile \
            --build-arg CONFIG_FILE=configs/newrelic.agent.json \
            -t agent-smith:newrelic-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.short }} .

      # The following steps are examples and are commented out because AWS credentials are not configured.
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Tag & Push images to ECR
      #   run: |
      #     REGISTRY=${{ env.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      #     docker tag agent-smith:slite-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.short }} $REGISTRY/${{ env.ECR_REPOSITORY }}:slite-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.short }}
      #     docker tag agent-smith:newrelic-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.short }} $REGISTRY/${{ env.ECR_REPOSITORY }}:newrelic-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.short }}
      #     docker push $REGISTRY/${{ env.ECR_REPOSITORY }}:slite-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.short }}
      #     docker push $REGISTRY/${{ env.ECR_REPOSITORY }}:newrelic-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.short }}
